/*
 * This file is generated by jOOQ.
 */
package com.theoxao.duraemon.orm.dto.tables;


import com.theoxao.duraemon.orm.dto.Public;
import com.theoxao.duraemon.orm.dto.tables.records.TbRecipeRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.JSON;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TbRecipe extends TableImpl<TbRecipeRecord> {

    /**
     * The reference instance of <code>public.tb_recipe</code>
     */
    public static final TbRecipe TB_RECIPE = new TbRecipe();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>public.tb_recipe.id</code>.
     */
    public final TableField<TbRecipeRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "");
    /**
     * The column <code>public.tb_recipe.desc</code>.
     */
    public final TableField<TbRecipeRecord, String> DESC = createField(DSL.name("desc"), SQLDataType.CLOB, this, "");
    /**
     * The column <code>public.tb_recipe.difficulty</code>.
     */
    public final TableField<TbRecipeRecord, JSON> DIFFICULTY = createField(DSL.name("difficulty"), SQLDataType.JSON, this, "");
    /**
     * The column <code>public.tb_recipe.ident</code>.
     */
    public final TableField<TbRecipeRecord, String> IDENT = createField(DSL.name("ident"), SQLDataType.CLOB, this, "");
    /**
     * The column <code>public.tb_recipe.image</code>.
     */
    public final TableField<TbRecipeRecord, JSON> IMAGE = createField(DSL.name("image"), SQLDataType.JSON, this, "");
    /**
     * The column <code>public.tb_recipe.name</code>.
     */
    public final TableField<TbRecipeRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB, this, "");
    /**
     * The column <code>public.tb_recipe.photo</code>.
     */
    public final TableField<TbRecipeRecord, JSON> PHOTO = createField(DSL.name("photo"), SQLDataType.JSON, this, "");
    /**
     * The column <code>public.tb_recipe.score</code>.
     */
    public final TableField<TbRecipeRecord, String> SCORE = createField(DSL.name("score"), SQLDataType.CLOB, this, "");
    /**
     * The column <code>public.tb_recipe.summary</code>.
     */
    public final TableField<TbRecipeRecord, String> SUMMARY = createField(DSL.name("summary"), SQLDataType.CLOB, this, "");
    /**
     * The column <code>public.tb_recipe.thumb</code>.
     */
    public final TableField<TbRecipeRecord, String> THUMB = createField(DSL.name("thumb"), SQLDataType.CLOB, this, "");
    /**
     * The column <code>public.tb_recipe.tips</code>.
     */
    public final TableField<TbRecipeRecord, String> TIPS = createField(DSL.name("tips"), SQLDataType.CLOB, this, "");
    /**
     * The column <code>public.tb_recipe.url</code>.
     */
    public final TableField<TbRecipeRecord, String> URL = createField(DSL.name("url"), SQLDataType.CLOB, this, "");
    /**
     * The column <code>public.tb_recipe.author</code>.
     */
    public final TableField<TbRecipeRecord, JSON> AUTHOR = createField(DSL.name("author"), SQLDataType.JSON, this, "");
    /**
     * The column <code>public.tb_recipe.label</code>.
     */
    public final TableField<TbRecipeRecord, JSON> LABEL = createField(DSL.name("label"), SQLDataType.JSON, this, "");
    /**
     * The column <code>public.tb_recipe.create_time</code>.
     */
    public final TableField<TbRecipeRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), SQLDataType.LOCALDATETIME(6), this, "");
    /**
     * The column <code>public.tb_recipe.ingredient</code>.
     */
    public final TableField<TbRecipeRecord, JSON> INGREDIENT = createField(DSL.name("ingredient"), SQLDataType.JSON, this, "");
    /**
     * The column <code>public.tb_recipe.instruction</code>.
     */
    public final TableField<TbRecipeRecord, JSON> INSTRUCTION = createField(DSL.name("instruction"), SQLDataType.JSON, this, "");
    /**
     * The column <code>public.tb_recipe.duration</code>.
     */
    public final TableField<TbRecipeRecord, JSON> DURATION = createField(DSL.name("duration"), SQLDataType.JSON, this, "");
    /**
     * The column <code>public.tb_recipe.recipe_cats</code>.
     */
    public final TableField<TbRecipeRecord, JSON> RECIPE_CATS = createField(DSL.name("recipe_cats"), SQLDataType.JSON, this, "");
    /**
     * The column <code>public.tb_recipe.original_cate</code>.
     */
    public final TableField<TbRecipeRecord, JSON> ORIGINAL_CATE = createField(DSL.name("original_cate"), SQLDataType.JSON, this, "");
    /**
     * The column <code>public.tb_recipe.stats</code>.
     */
    public final TableField<TbRecipeRecord, JSON> STATS = createField(DSL.name("stats"), SQLDataType.JSON, this, "");
    /**
     * The column <code>public.tb_recipe.equipment_related_info</code>.
     */
    public final TableField<TbRecipeRecord, JSON> EQUIPMENT_RELATED_INFO = createField(DSL.name("equipment_related_info"), SQLDataType.JSON, this, "");
    /**
     * The column <code>public.tb_recipe.video_url</code>.
     */
    public final TableField<TbRecipeRecord, String> VIDEO_URL = createField(DSL.name("video_url"), SQLDataType.CLOB, this, "");
    /**
     * The column <code>public.tb_recipe.video_page_url</code>.
     */
    public final TableField<TbRecipeRecord, String> VIDEO_PAGE_URL = createField(DSL.name("video_page_url"), SQLDataType.CLOB, this, "");
    /**
     * The column <code>public.tb_recipe.cover_micro_video</code>.
     */
    public final TableField<TbRecipeRecord, JSON> COVER_MICRO_VIDEO = createField(DSL.name("cover_micro_video"), SQLDataType.JSON, this, "");
    /**
     * The column <code>public.tb_recipe.vod_video</code>.
     */
    public final TableField<TbRecipeRecord, JSON> VOD_VIDEO = createField(DSL.name("vod_video"), SQLDataType.JSON, this, "");
    /**
     * The column <code>public.tb_recipe.summary_desc</code>.
     */
    public final TableField<TbRecipeRecord, String> SUMMARY_DESC = createField(DSL.name("summary_desc"), SQLDataType.CLOB, this, "");

    private TbRecipe(Name alias, Table<TbRecipeRecord> aliased) {
        this(alias, aliased, null);
    }

    private TbRecipe(Name alias, Table<TbRecipeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.tb_recipe</code> table reference
     */
    public TbRecipe(String alias) {
        this(DSL.name(alias), TB_RECIPE);
    }

    /**
     * Create an aliased <code>public.tb_recipe</code> table reference
     */
    public TbRecipe(Name alias) {
        this(alias, TB_RECIPE);
    }

    /**
     * Create a <code>public.tb_recipe</code> table reference
     */
    public TbRecipe() {
        this(DSL.name("tb_recipe"), null);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TbRecipeRecord> getRecordType() {
        return TbRecipeRecord.class;
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<TbRecipeRecord> getPrimaryKey() {
        return Internal.createUniqueKey(TbRecipe.TB_RECIPE, DSL.name("recipe_pkey"), new TableField[] { TbRecipe.TB_RECIPE.ID }, true);
    }

    @Override
    public List<UniqueKey<TbRecipeRecord>> getKeys() {
        return Arrays.<UniqueKey<TbRecipeRecord>>asList(
              Internal.createUniqueKey(TbRecipe.TB_RECIPE, DSL.name("recipe_pkey"), new TableField[] { TbRecipe.TB_RECIPE.ID }, true)
        );
    }

    @Override
    public TbRecipe as(String alias) {
        return new TbRecipe(DSL.name(alias), this);
    }

    @Override
    public TbRecipe as(Name alias) {
        return new TbRecipe(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TbRecipe rename(String name) {
        return new TbRecipe(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TbRecipe rename(Name name) {
        return new TbRecipe(name, null);
    }
}
