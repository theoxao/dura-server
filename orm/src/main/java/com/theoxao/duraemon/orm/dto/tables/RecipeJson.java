/*
 * This file is generated by jOOQ.
 */
package com.theoxao.duraemon.orm.dto.tables;


import com.theoxao.duraemon.orm.dto.Public;
import com.theoxao.duraemon.orm.dto.tables.records.RecipeJsonRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.JSON;
import org.jooq.Name;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RecipeJson extends TableImpl<RecipeJsonRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.recipe_json</code>
     */
    public static final RecipeJson RECIPE_JSON = new RecipeJson();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RecipeJsonRecord> getRecordType() {
        return RecipeJsonRecord.class;
    }

    /**
     * The column <code>public.recipe_json.id</code>.
     */
    public final TableField<RecipeJsonRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.recipe_json.recipe_json</code>.
     */
    public final TableField<RecipeJsonRecord, JSON> RECIPE_JSON_ = createField(DSL.name("recipe_json"), SQLDataType.JSON, this, "");

    /**
     * The column <code>public.recipe_json.insert_time</code>.
     */
    public final TableField<RecipeJsonRecord, LocalDateTime> INSERT_TIME = createField(DSL.name("insert_time"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.recipe_json.to_obj</code>.
     */
    public final TableField<RecipeJsonRecord, Boolean> TO_OBJ = createField(DSL.name("to_obj"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    private RecipeJson(Name alias, Table<RecipeJsonRecord> aliased) {
        this(alias, aliased, null);
    }

    private RecipeJson(Name alias, Table<RecipeJsonRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.recipe_json</code> table reference
     */
    public RecipeJson(String alias) {
        this(DSL.name(alias), RECIPE_JSON);
    }

    /**
     * Create an aliased <code>public.recipe_json</code> table reference
     */
    public RecipeJson(Name alias) {
        this(alias, RECIPE_JSON);
    }

    /**
     * Create a <code>public.recipe_json</code> table reference
     */
    public RecipeJson() {
        this(DSL.name("recipe_json"), null);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<RecipeJsonRecord> getPrimaryKey() {
        return Internal.createUniqueKey(RecipeJson.RECIPE_JSON, DSL.name("recipe_json_pkey"), new TableField[] { RecipeJson.RECIPE_JSON.ID }, true);
    }

    @Override
    public List<UniqueKey<RecipeJsonRecord>> getKeys() {
        return Arrays.<UniqueKey<RecipeJsonRecord>>asList(
              Internal.createUniqueKey(RecipeJson.RECIPE_JSON, DSL.name("recipe_json_pkey"), new TableField[] { RecipeJson.RECIPE_JSON.ID }, true)
        );
    }

    @Override
    public RecipeJson as(String alias) {
        return new RecipeJson(DSL.name(alias), this);
    }

    @Override
    public RecipeJson as(Name alias) {
        return new RecipeJson(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RecipeJson rename(String name) {
        return new RecipeJson(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RecipeJson rename(Name name) {
        return new RecipeJson(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, JSON, LocalDateTime, Boolean> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
