/*
 * This file is generated by jOOQ.
 */
package com.theoxao.dura.orm.dto.tables;


import com.theoxao.dura.orm.dto.Public;
import com.theoxao.dura.orm.dto.tables.records.TbItemDetailRecord;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.JSON;
import org.jooq.Name;
import org.jooq.Row17;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TbItemDetail extends TableImpl<TbItemDetailRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.tb_item_detail</code>
     */
    public static final TbItemDetail TB_ITEM_DETAIL = new TbItemDetail();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TbItemDetailRecord> getRecordType() {
        return TbItemDetailRecord.class;
    }

    /**
     * The column <code>public.tb_item_detail.id</code>.
     */
    public final TableField<TbItemDetailRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.tb_item_detail.item_id</code>.
     */
    public final TableField<TbItemDetailRecord, Integer> ITEM_ID = createField(DSL.name("item_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.tb_item_detail.good_id</code>.
     */
    public final TableField<TbItemDetailRecord, Integer> GOOD_ID = createField(DSL.name("good_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.tb_item_detail.name</code>.
     */
    public final TableField<TbItemDetailRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.tb_item_detail.images</code>.
     */
    public final TableField<TbItemDetailRecord, JSON> IMAGES = createField(DSL.name("images"), SQLDataType.JSON, this, "");

    /**
     * The column <code>public.tb_item_detail.desc</code>.
     */
    public final TableField<TbItemDetailRecord, String> DESC = createField(DSL.name("desc"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.tb_item_detail.pd</code>. 生产日期
     */
    public final TableField<TbItemDetailRecord, LocalDate> PD = createField(DSL.name("pd"), SQLDataType.LOCALDATE, this, "生产日期");

    /**
     * The column <code>public.tb_item_detail.qty</code>. 数量
     */
    public final TableField<TbItemDetailRecord, Integer> QTY = createField(DSL.name("qty"), SQLDataType.INTEGER, this, "数量");

    /**
     * The column <code>public.tb_item_detail.best_favor</code>. 保质期
     */
    public final TableField<TbItemDetailRecord, Integer> BEST_FAVOR = createField(DSL.name("best_favor"), SQLDataType.INTEGER, this, "保质期");

    /**
     * The column <code>public.tb_item_detail.shelf_life</code>.
     */
    public final TableField<TbItemDetailRecord, Integer> SHELF_LIFE = createField(DSL.name("shelf_life"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.tb_item_detail.storage</code>. 储存方式-未拆封
     */
    public final TableField<TbItemDetailRecord, String> STORAGE = createField(DSL.name("storage"), SQLDataType.VARCHAR(255), this, "储存方式-未拆封");

    /**
     * The column <code>public.tb_item_detail.used_storage</code>. 储存方式-已拆封
     */
    public final TableField<TbItemDetailRecord, String> USED_STORAGE = createField(DSL.name("used_storage"), SQLDataType.VARCHAR(255), this, "储存方式-已拆封");

    /**
     * The column <code>public.tb_item_detail.batch_code</code>. 批次编号
     */
    public final TableField<TbItemDetailRecord, String> BATCH_CODE = createField(DSL.name("batch_code"), SQLDataType.VARCHAR(255), this, "批次编号");

    /**
     * The column <code>public.tb_item_detail.cost</code>. 价格
     */
    public final TableField<TbItemDetailRecord, Integer> COST = createField(DSL.name("cost"), SQLDataType.INTEGER, this, "价格");

    /**
     * The column <code>public.tb_item_detail.expiry</code>.
     */
    public final TableField<TbItemDetailRecord, LocalDateTime> EXPIRY = createField(DSL.name("expiry"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.tb_item_detail.create_time</code>.
     */
    public final TableField<TbItemDetailRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.tb_item_detail.update_time</code>.
     */
    public final TableField<TbItemDetailRecord, LocalDateTime> UPDATE_TIME = createField(DSL.name("update_time"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private TbItemDetail(Name alias, Table<TbItemDetailRecord> aliased) {
        this(alias, aliased, null);
    }

    private TbItemDetail(Name alias, Table<TbItemDetailRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.tb_item_detail</code> table reference
     */
    public TbItemDetail(String alias) {
        this(DSL.name(alias), TB_ITEM_DETAIL);
    }

    /**
     * Create an aliased <code>public.tb_item_detail</code> table reference
     */
    public TbItemDetail(Name alias) {
        this(alias, TB_ITEM_DETAIL);
    }

    /**
     * Create a <code>public.tb_item_detail</code> table reference
     */
    public TbItemDetail() {
        this(DSL.name("tb_item_detail"), null);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<TbItemDetailRecord, Integer> getIdentity() {
        return (Identity<TbItemDetailRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<TbItemDetailRecord> getPrimaryKey() {
        return Internal.createUniqueKey(TbItemDetail.TB_ITEM_DETAIL, DSL.name("tb_item_detail_pkey"), new TableField[] { TbItemDetail.TB_ITEM_DETAIL.ID }, true);
    }

    @Override
    public List<UniqueKey<TbItemDetailRecord>> getKeys() {
        return Arrays.<UniqueKey<TbItemDetailRecord>>asList(
              Internal.createUniqueKey(TbItemDetail.TB_ITEM_DETAIL, DSL.name("tb_item_detail_pkey"), new TableField[] { TbItemDetail.TB_ITEM_DETAIL.ID }, true)
        );
    }

    @Override
    public TbItemDetail as(String alias) {
        return new TbItemDetail(DSL.name(alias), this);
    }

    @Override
    public TbItemDetail as(Name alias) {
        return new TbItemDetail(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TbItemDetail rename(String name) {
        return new TbItemDetail(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TbItemDetail rename(Name name) {
        return new TbItemDetail(name, null);
    }

    // -------------------------------------------------------------------------
    // Row17 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row17<Integer, Integer, Integer, String, JSON, String, LocalDate, Integer, Integer, Integer, String, String, String, Integer, LocalDateTime, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row17) super.fieldsRow();
    }
}
