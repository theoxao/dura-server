/*
 * This file is generated by jOOQ.
 */
package com.theoxao.dura.orm.dto.tables;


import com.theoxao.dura.orm.dto.Public;
import com.theoxao.dura.orm.dto.tables.records.TbStorageRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.JSON;
import org.jooq.Name;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TbStorage extends TableImpl<TbStorageRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.tb_storage</code>
     */
    public static final TbStorage TB_STORAGE = new TbStorage();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TbStorageRecord> getRecordType() {
        return TbStorageRecord.class;
    }

    /**
     * The column <code>public.tb_storage.id</code>.
     */
    public final TableField<TbStorageRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.tb_storage.name</code>.
     */
    public final TableField<TbStorageRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.tb_storage.cates</code>.
     */
    public final TableField<TbStorageRecord, JSON> CATES = createField(DSL.name("cates"), SQLDataType.JSON, this, "");

    private TbStorage(Name alias, Table<TbStorageRecord> aliased) {
        this(alias, aliased, null);
    }

    private TbStorage(Name alias, Table<TbStorageRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.tb_storage</code> table reference
     */
    public TbStorage(String alias) {
        this(DSL.name(alias), TB_STORAGE);
    }

    /**
     * Create an aliased <code>public.tb_storage</code> table reference
     */
    public TbStorage(Name alias) {
        this(alias, TB_STORAGE);
    }

    /**
     * Create a <code>public.tb_storage</code> table reference
     */
    public TbStorage() {
        this(DSL.name("tb_storage"), null);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<TbStorageRecord, Integer> getIdentity() {
        return (Identity<TbStorageRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<TbStorageRecord> getPrimaryKey() {
        return Internal.createUniqueKey(TbStorage.TB_STORAGE, DSL.name("tb_storage_method_pkey"), new TableField[] { TbStorage.TB_STORAGE.ID }, true);
    }

    @Override
    public List<UniqueKey<TbStorageRecord>> getKeys() {
        return Arrays.<UniqueKey<TbStorageRecord>>asList(
              Internal.createUniqueKey(TbStorage.TB_STORAGE, DSL.name("tb_storage_method_pkey"), new TableField[] { TbStorage.TB_STORAGE.ID }, true)
        );
    }

    @Override
    public TbStorage as(String alias) {
        return new TbStorage(DSL.name(alias), this);
    }

    @Override
    public TbStorage as(Name alias) {
        return new TbStorage(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TbStorage rename(String name) {
        return new TbStorage(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TbStorage rename(Name name) {
        return new TbStorage(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, JSON> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
