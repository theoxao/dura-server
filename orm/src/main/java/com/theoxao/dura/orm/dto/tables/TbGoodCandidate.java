/*
 * This file is generated by jOOQ.
 */
package com.theoxao.dura.orm.dto.tables;


import com.theoxao.dura.orm.dto.Public;
import com.theoxao.dura.orm.dto.tables.records.TbGoodCandidateRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TbGoodCandidate extends TableImpl<TbGoodCandidateRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.tb_good_candidate</code>
     */
    public static final TbGoodCandidate TB_GOOD_CANDIDATE = new TbGoodCandidate();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TbGoodCandidateRecord> getRecordType() {
        return TbGoodCandidateRecord.class;
    }

    /**
     * The column <code>public.tb_good_candidate.id</code>.
     */
    public final TableField<TbGoodCandidateRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.tb_good_candidate.name</code>.
     */
    public final TableField<TbGoodCandidateRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.tb_good_candidate.from</code>.
     */
    public final TableField<TbGoodCandidateRecord, String> FROM = createField(DSL.name("from"), SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>public.tb_good_candidate.cate</code>.
     */
    public final TableField<TbGoodCandidateRecord, Integer> CATE = createField(DSL.name("cate"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.tb_good_candidate.sub_cate</code>.
     */
    public final TableField<TbGoodCandidateRecord, Integer> SUB_CATE = createField(DSL.name("sub_cate"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.tb_good_candidate.count</code>.
     */
    public final TableField<TbGoodCandidateRecord, Integer> COUNT = createField(DSL.name("count"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.tb_good_candidate.py</code>.
     */
    public final TableField<TbGoodCandidateRecord, String> PY = createField(DSL.name("py"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.tb_good_candidate.py_short</code>.
     */
    public final TableField<TbGoodCandidateRecord, String> PY_SHORT = createField(DSL.name("py_short"), SQLDataType.VARCHAR(31), this, "");

    private TbGoodCandidate(Name alias, Table<TbGoodCandidateRecord> aliased) {
        this(alias, aliased, null);
    }

    private TbGoodCandidate(Name alias, Table<TbGoodCandidateRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.tb_good_candidate</code> table reference
     */
    public TbGoodCandidate(String alias) {
        this(DSL.name(alias), TB_GOOD_CANDIDATE);
    }

    /**
     * Create an aliased <code>public.tb_good_candidate</code> table reference
     */
    public TbGoodCandidate(Name alias) {
        this(alias, TB_GOOD_CANDIDATE);
    }

    /**
     * Create a <code>public.tb_good_candidate</code> table reference
     */
    public TbGoodCandidate() {
        this(DSL.name("tb_good_candidate"), null);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<TbGoodCandidateRecord, String> getIdentity() {
        return (Identity<TbGoodCandidateRecord, String>) super.getIdentity();
    }

    @Override
    public UniqueKey<TbGoodCandidateRecord> getPrimaryKey() {
        return Internal.createUniqueKey(TbGoodCandidate.TB_GOOD_CANDIDATE, DSL.name("tb_good_candidate_pkey"), new TableField[] { TbGoodCandidate.TB_GOOD_CANDIDATE.ID }, true);
    }

    @Override
    public List<UniqueKey<TbGoodCandidateRecord>> getKeys() {
        return Arrays.<UniqueKey<TbGoodCandidateRecord>>asList(
              Internal.createUniqueKey(TbGoodCandidate.TB_GOOD_CANDIDATE, DSL.name("tb_good_candidate_pkey"), new TableField[] { TbGoodCandidate.TB_GOOD_CANDIDATE.ID }, true)
        );
    }

    @Override
    public TbGoodCandidate as(String alias) {
        return new TbGoodCandidate(DSL.name(alias), this);
    }

    @Override
    public TbGoodCandidate as(Name alias) {
        return new TbGoodCandidate(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TbGoodCandidate rename(String name) {
        return new TbGoodCandidate(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TbGoodCandidate rename(Name name) {
        return new TbGoodCandidate(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<String, String, String, Integer, Integer, Integer, String, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
